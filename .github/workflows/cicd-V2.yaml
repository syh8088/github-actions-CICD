name: cicd-V2
on:
  push:
    paths:
    - 'springboot-CICD/**'
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    types: [opened, synchronize, closed]
    branches: [release-dev]
    paths:
    - 'springboot-CICD/**'

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: |
        cd springboot-CICD
        chmod +x gradlew
#    - name: Setup Gradle
#      uses: gradle/gradle-build-action@v2
#      with:
#        arguments: build
#        cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}
    - name: Build with Gradle
      run: |
        cd springboot-CICD
        ./gradlew build

  set-environment:
    if: github.event.pull_request.merged == true || github.ref_type == 'tag'
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
    - name: set env
      id: set-env
      run: |
        if [[ ${{ github.ref_type }} == "tag" ]]; then
          echo "environment=qa" >> $GITHUB_OUTPUT 
          exit 0
        fi
        
        if [[ ${{ github.ref_type }} == "branch" ]]; then
          echo "environment=dev" >> $GITHUB_OUTPUT
          if [[ ${{ github.base_ref }} == "main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT 
          fi
        fi
    - name: check env
      run: echo ${{ steps.set-env.outputs.environment }}

  image-build:
    runs-on: ubuntu-latest
    needs: [ set-environment ]
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: [ "${{ needs.set-environment.outputs.environment }}" ]
    environment: ${{ matrix.environment }}
    steps:
    - name: checkout the code
      uses: actions/checkout@v4
    - name: Configure AWS Credentials
      id: credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
    - name: docker build & push
      run: |
        docker build -f Dockerfile --tag ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }} .
        docker push ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }}